# -*- coding: utf-8 -*-
"""BinaryTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18NAfsx7kg9gDciNMjY9Ds-pyzijcYWzX
"""

class BinaryNode:
  def __init__(self, data):
    self.__data = data
    self.__alone = True
    self.__parent = None
    self.__right = None
    self.__left = None

  def set_data(self, data):
    self.__data = data

  def set_alone(self, alone):
    self.__alone = alone

  def set_parent(self, parent):
    self.__parent = parent

  def set_right(self, right):
    self.__right = right

  def set_left(self, left):
    self.__left = left 

  def get_data(self):
    return self.__data

  def is_alone(self):
    return self.__alone

  def get_parent(self):
    return self.__parent

  def get_right(self):
    return self.__right

  def get_left(self):
    return self.__left

  def is_leaf(self):
    return self.__right == None and self.__left == None
  
  def check_comparable(self, value):
    try:
      self._data > value
    except TypeError:
      print("TypeError has occurred!")

class BinaryTree:
  def __init__(self):
    self.__root = None
    self.__size = 0

  def set_root(self, root):
    self.__root = root

  def get_root(self):
    return self.__root

  def get_size(self):
    return self.__size

  def select_branch(self, node, value):
    if value < node.get_data():
      return node.get_left()
    elif value > node.get_data:
      return node.get_right()

  def find(self, value):
    if value == self.__root.get_data():
      return self.__root
    
    else:
      return self.select_branch(self.__root, value)

aaa = BinaryNode(10)
bbb = BinaryNode(5)
ccc = BinaryNode(15)

aaa.set_left(bbb)
aaa.set_right(ccc)

AAA = BinaryTree()
AAA.set_root(aaa)

print(AAA.find(4).get_data())

