# -*- coding: utf-8 -*-
"""BinaryTree.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18NAfsx7kg9gDciNMjY9Ds-pyzijcYWzX
"""

class BinaryNode:
    def __init__(self, data):
        self._data = data
        self._alone = True
        self._parent = None
        self._right = None
        self._left = None

    def set_data(self, data):
        self._data = data

    def set_alone(self, alone):
        self._alone = alone

    def set_parent(self, parent):
        self._parent = parent

    def set_right(self, right):
        self._right = right

    def set_left(self, left):
        self._left = left

    @property
    def data(self):
        return self._data

    def is_alone(self):
        return self._alone

    @property
    def parent(self):
        return self._parent

    @property
    def right(self):
        return self._right

    @property
    def left(self):
        return self._left

    def is_leaf(self):
        return self._right == None and self._Sleft == None

    def check_comparable(self, value):
        try:
            self._data > value
        except TypeError:
            print("TypeError has occurred!")

    def add(self, data):

        try:
            self._data > data
        except:
            raise TypeError("TypeError has occurred!")


        if data <= self._data:
            if self._left:
                self._left.add(data)
            else:
                self._left = BinaryNode(data)
        else:
            if self._right:
                self._right.add(data)
            else:
                self._right = BinaryNode(data)

class BinaryTree:
    def __init__(self):
        self._root = None
        self._size = 0

    def set_root(self, root):
        self._root = root

    @property
    def root(self):
        return self._root

    @property
    def size(self):
        return self._size

    def add(self, data):
        if self._root is None:
            self._root = BinaryNode(data)
        else:
            self._root.add(data)

    def select_branch(self, node, data):
        if data < node.data:
            return node.left
        elif data > node.data:
            return node.right

    def find(self, data):
        if data == self._root.data:
            return self._root

        else:
            return self.select_branch(self._root, value)

if __name__ == '__main__':

    aaa = BinaryTree()

    aaa.add(12)
    aaa.add(1)
    try:
        aaa.add("c")
    except TypeError as e:
        print(e)

    print(aaa.root.data)
    print(aaa.root.right)
    print(aaa.root.left)
